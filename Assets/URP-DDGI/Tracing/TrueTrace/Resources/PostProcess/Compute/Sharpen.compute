
#pragma kernel CSMain

RWTexture2D<float4> Result;
Texture2D<float4> Input;

float Sharpness;
int screen_width;
int screen_height;

SamplerState my_point_clamp_sampler;
SamplerState my_linear_clamp_sampler;

inline float luminance(const float3 a) {
    return dot(float3(0.299f, 0.587f, 0.114f), a);
}

float3 srgb2lin(float3 color)
{
    return color * color;    
}

float3 lin2srgb(float3 color)
{
    return sqrt(color);   
}

// Contrast Adaptive Sharpening (CAS)
// Reference: Lou Kramer, FidelityFX CAS, AMD Developer Day 2019,
// https://gpuopen.com/wp-content/uploads/2019/07/FidelityFX-CAS.pptx
float3 cas(float2 texcoord, float sharpness_knob)
{
    texcoord += 0.5f;
    float3 a = (Input.SampleLevel(my_point_clamp_sampler, (texcoord + int2(0.0, -1.0)) / float2(screen_width, screen_height), 0).rgb);
    float3 b = (Input.SampleLevel(my_point_clamp_sampler, (texcoord + int2(-1.0, 0.0)) / float2(screen_width, screen_height), 0).rgb);
    float3 c = (Input.SampleLevel(my_point_clamp_sampler, (texcoord + int2(0.0, 0.0)) / float2(screen_width, screen_height), 0).rgb);
    float3 d = (Input.SampleLevel(my_point_clamp_sampler, (texcoord + int2(1.0, 0.0)) / float2(screen_width, screen_height), 0).rgb);
    float3 e = (Input.SampleLevel(my_point_clamp_sampler, (texcoord + int2(0.0, 1.0)) / float2(screen_width, screen_height), 0).rgb);

    float min_g = min(luminance(a), min(luminance(b), min(luminance(c), min(luminance(d), luminance(e)))));
    float max_g = max(luminance(a), max(luminance(b), max(luminance(c), max(luminance(d), luminance(e)))));
    float DU = max(max_g, 1.0f);
    float sharpening_amount = sqrt(max(min(1.0 - max_g / DU, min_g / DU) / (max_g / DU),0));
    float w = sharpening_amount * lerp(-0.125, -0.2, sharpness_knob);

    return (w * (a + b + d + e) + c) / (4.0 * w + 1.0);
}


[numthreads(16,16,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{


    if (id.x >= screen_width || id.y >= screen_height) return;

        Result[id.xy] = float4((cas(id.xy, Sharpness)),1);


}
