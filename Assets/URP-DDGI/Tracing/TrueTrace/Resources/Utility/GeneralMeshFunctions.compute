#include "../GlobalDefines.cginc"
#include "../MainCompute/CommonStructs.cginc"

#pragma kernel CombineTriBuffers

RWStructuredBuffer<CudaTriangle> OutCudaTriArray;

StructuredBuffer<CudaTriangle> InCudaTriArray;

uint Offset;
uint Count;

[numthreads(372, 1, 1)]
void CombineTriBuffers(uint3 id : SV_DispatchThreadID)
{
	if (id.x >= Count)
		return;

	OutCudaTriArray[id.x + Offset] = InCudaTriArray[id.x];

}



#pragma kernel CombineNodeBuffers

RWStructuredBuffer<BVHNode8Data> OutAggNodes;

StructuredBuffer<BVHNode8Data> InAggNodes;

[numthreads(372, 1, 1)]
void CombineNodeBuffers(uint3 id : SV_DispatchThreadID)
{
	if (id.x >= Count)
		return;

	OutAggNodes[id.x + Offset] = InAggNodes[id.x];

}

#pragma kernel CombineLightBuffers

StructuredBuffer<LightTriData> LightTrianglesIn;
RWStructuredBuffer<LightTriData> LightTrianglesOut;

[numthreads(372, 1, 1)]
void CombineLightBuffers(uint3 id : SV_DispatchThreadID)
{
	if (id.x >= Count)
		return;

	LightTrianglesOut[id.x + Offset] = LightTrianglesIn[id.x];

}



#pragma kernel CombineLightNodes

StructuredBuffer<LightBVHData> LightNodesIn;
RWStructuredBuffer<LightBVHData> LightNodesOut;
RWStructuredBuffer<LightBVHData> LightNodesOut2;

[numthreads(372, 1, 1)]
void CombineLightNodes(uint3 id : SV_DispatchThreadID)
{
	if (id.x >= Count)
		return;

	LightNodesOut[id.x + Offset] = LightNodesIn[id.x];
	LightNodesOut2[id.x + Offset] = LightNodesIn[id.x];

}

#pragma kernel CombineSGTreeNodes

StructuredBuffer<GaussianTreeNode> SGNodesIn;
RWStructuredBuffer<GaussianTreeNode> SGNodesOut;
RWStructuredBuffer<GaussianTreeNode> SGNodesOut2;

[numthreads(372, 1, 1)]
void CombineSGTreeNodes(uint3 id : SV_DispatchThreadID)
{
	if (id.x >= Count)
		return;

	SGNodesOut[id.x + Offset] = SGNodesIn[id.x];
	SGNodesOut2[id.x + Offset] = SGNodesIn[id.x];

}